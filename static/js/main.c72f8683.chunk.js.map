{"version":3,"sources":["components/Button/Button.js","components/PaginationSelect/PaginationSelect.js","components/Pagination/Pagination.js","components/AppContent/AppContent.js","App.js","index.js"],"names":["Button","buttonIndex","buttonsAmount","onPageChange","page","isPrecurrent","isPostcurrent","isSnown","className","type","hidden","onClick","PaginationSelect","perPage","onPerPageChange","name","value","onChange","event","Number","target","Pagination","props","total","Math","ceil","buttonsIndexes","Array","fill","map","zero","index","startItem","getInfoText","classNames","disabled","key","active","AppContent","data","currentPage","endItem","pageContent","item","id","title","body","slice","App","state","isLoading","maxSize","newPage","setState","newPerPage","fetch","then","responese","json","result","prevState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c72f8683.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ buttonIndex, buttonsAmount, onPageChange, page }) => {\n  const isCurrent = page === buttonIndex;\n  const isFirst = buttonIndex === 1;\n  const isLast = buttonIndex === buttonsAmount;\n\n  const isPrecurrent = buttonIndex - 1 > 1\n    && buttonIndex === page - 1;\n  const isPostcurrent = buttonIndex + 1 < buttonsAmount\n    && buttonIndex === page + 1;\n\n  const isSnown = isFirst || isLast || isCurrent\n    || buttonIndex === page - 1 || buttonIndex === page + 1;\n\n  return (\n    <>\n      {\n        isPrecurrent && <div className=\"page-link\">...</div>\n      }\n      <button\n        type=\"button\"\n        className=\"page-link\"\n        hidden={!isSnown}\n        onClick={() => onPageChange(buttonIndex)}\n      >\n        {buttonIndex}\n      </button>\n      {\n        isPostcurrent && <div className=\"page-link\">...</div>\n      }\n    </>\n  );\n};\n\nButton.propTypes = {\n  buttonIndex: PropTypes.number.isRequired,\n  buttonsAmount: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PaginationSelect = ({ perPage, onPerPageChange }) => {\n  const handleChange = (event) => {\n    onPerPageChange(Number(event.target.value));\n  };\n\n  return (\n    <select\n      name=\"PaginationSelect\"\n      value={perPage}\n      className=\"form-control col-md-1\"\n      onChange={handleChange}\n    >\n      <option value=\"3\">3</option>\n      <option value=\"5\">5</option>\n      <option value=\"10\">10</option>\n      <option value=\"20\">20</option>\n    </select>\n  );\n};\n\nPaginationSelect.propTypes = {\n  perPage: PropTypes.number.isRequired,\n  onPerPageChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Button } from '../Button';\nimport { PaginationSelect } from '../PaginationSelect';\n\nexport const Pagination = (props) => {\n  const { total, perPage, page, onPageChange, onPerPageChange } = props;\n\n  const buttonsAmount = Math.ceil(total / perPage);\n  const buttonsIndexes = new Array(buttonsAmount).fill(0)\n    .map((zero, index) => index + 1);\n\n  const getInfoText = () => {\n    const startItem = ((page - 1) * perPage) + 1;\n\n    if (startItem >= total - perPage) {\n      return `${startItem} - ${total} of ${total}`;\n    }\n\n    return `${startItem} - ${startItem + perPage} of ${total}`;\n  };\n\n  const previousPage = () => {\n    onPageChange(page - 1);\n  };\n\n  const nextPage = () => {\n    onPageChange(page + 1);\n  };\n\n  return (\n    <div className=\"d-flex flex-column align-items-center\">\n      <PaginationSelect\n        perPage={perPage}\n        onPerPageChange={onPerPageChange}\n      />\n      <div>{getInfoText()}</div>\n\n      <ul className=\"pagination justify-content-center mt-2\">\n        <li\n          className={classNames('page-item', {\n            disabled: page === 1,\n          })}\n        >\n          <button\n            type=\"button\"\n            className=\"page-link\"\n            onClick={previousPage}\n            disabled={page === 1}\n          >\n            Previous\n          </button>\n        </li>\n\n        {\n          buttonsIndexes.map(buttonIndex => (\n            <li\n              key={buttonIndex}\n              className={classNames('page-item', 'spread-item', {\n                active: page === buttonIndex,\n              })}\n            >\n              <Button\n                buttonIndex={buttonIndex}\n                buttonsAmount={buttonsAmount}\n                onPageChange={onPageChange}\n                page={page}\n              />\n            </li>\n          ))\n        }\n\n        <li\n          className={classNames('page-item', {\n            disabled: page === buttonsAmount,\n          })}\n        >\n          <button\n            type=\"button\"\n            className=\"page-link\"\n            onClick={nextPage}\n            disabled={page === buttonsAmount}\n          >\n            Next\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  total: PropTypes.number.isRequired,\n  perPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  onPerPageChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AppContent = ({ data, currentPage, perPage }) => {\n  const startItem = currentPage * perPage;\n  const endItem = startItem + perPage;\n\n  const pageContent = data.map(item => (\n    <div key={item.id} className=\"card col-4\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title text-capitalize\">\n          {item.title}\n        </h5>\n        <p className=\"card-text\">\n          {item.body}\n        </p>\n      </div>\n    </div>\n  ));\n\n  return (\n    <div className=\"row p-5\">\n      {\n        pageContent.slice(startItem, endItem)\n      }\n    </div>\n  );\n};\n\nAppContent.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n  currentPage: PropTypes.number.isRequired,\n  perPage: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { Pagination } from './components/Pagination';\nimport { AppContent } from './components/AppContent';\nimport './App.css';\n\nconst serverDataUrl = 'https://jsonplaceholder.typicode.com/posts';\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    data: [],\n    currentPage: 1,\n    perPage: 5,\n    maxSize: 42,\n  }\n\n  componentDidMount() {\n    fetch(serverDataUrl)\n      .then(responese => responese.json())\n      .then((result) => {\n        this.setState(prevState => ({\n          data: [...prevState.data, ...result.slice(0, prevState.maxSize)],\n          isLoading: false,\n        }));\n      });\n  }\n\n  onPageChange = (newPage) => {\n    this.setState({\n      currentPage: newPage,\n    });\n  }\n\n  onPerPageChange = (newPerPage) => {\n    this.setState({\n      currentPage: 1,\n      perPage: newPerPage,\n    });\n  }\n\n  render() {\n    const { data, currentPage, perPage, maxSize } = this.state;\n\n    return (\n      <div>\n        <h1 className=\"display-3 text-center\">Pagination</h1>\n\n        {\n          this.state.isLoading\n            ? <h1>Loading...</h1>\n            : (\n              <AppContent\n                data={data}\n                currentPage={currentPage - 1}\n                perPage={perPage}\n              />\n            )\n        }\n        <Pagination\n          total={maxSize}\n          perPage={perPage}\n          page={currentPage}\n          onPageChange={this.onPageChange}\n          onPerPageChange={this.onPerPageChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}